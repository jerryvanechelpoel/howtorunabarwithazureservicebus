@inject WaiterFactory Factory

<div class="container">
    <div class="row justify-content-center">
        <img src="@ImageSrc" />
    </div>
    <div class="row justify-content-center">
        <h3>@Name</h3>
    </div>
    <div class="row justify-content-center">
        <label class="switch">
            <input type="checkbox" @bind="@IsActive" @oninput="CheckChanged" />
            <span class="slider"></span>
        </label>
    </div>
</div>

@code {

    [Parameter]
    public string Name { get; set; }

    [Parameter]
    public string ImageSrc { get; set; }

    [Parameter]
    public EventCallback<string> OnWaiteringCallback { get; set; }

    public bool IsActive { get; set; }
    private WaiterLogic Logic { get; set; }

    protected override void OnInitialized()
    {
        Factory.Waiters.TryGetValue(Name, out WaiterLogic logic);
        Logic = logic;
        Logic.OnWaiteringActivity += WaiterLogic_OnWaiteringActivity;
        IsActive = logic.IsActive;
    }

    public void CheckChanged()
    {
        IsActive = !IsActive;

        if (IsActive)
        {
            Logic.Start();
        }
        else
        {
            Logic.Stop();
        }
    }

    private async void WaiterLogic_OnWaiteringActivity(object sender, WaiteringActivityEventArgs e)
        => await InvokeAsync(() => OnWaiteringCallback.InvokeAsync(e.Message));
}